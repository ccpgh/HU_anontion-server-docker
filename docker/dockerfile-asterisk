# Dockerfile

# Use the official Ubuntu 24.04 base image
FROM ubuntu:24.04

# Environment
ARG ANONTION_DOCKER_GITUSER=default_value
ARG ANONTION_DOCKER_BUILD=default_value

RUN apt update && \
    apt upgrade -y

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y unzip git sox gnupg2 curl libnewt-dev libssl-dev libncurses5-dev \
    subversion libsqlite3-dev build-essential libjansson-dev libxml2-dev libedit-dev uuid-dev && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y openssh-server net-tools && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y kmod strace python3 && \
    rm -rf /var/lib/apt/lists/*

# Install mysql client
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-client unixodbc unixodbc-dev && \
    rm -rf /var/lib/apt/lists/*

#maybe odbcinst libodbc2

WORKDIR /usr/local/src

RUN git clone "https://github.com/${ANONTION_DOCKER_GITUSER}/HU_anontion-asterisk"

RUN ln -s "HU_anontion-asterisk/code/asterisk-22.4.0" "asterisk"

WORKDIR "/usr/local/src/asterisk/contrib/scripts"

RUN ./get_mp3_source.sh

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive ./install_prereq install

#RUN ./install_prereq install-unpackaged

WORKDIR "/usr/local/src/asterisk/"

#RUN ./configure --with-pjproject-bundled
RUN ./configure

RUN make menuselect

#--enable-category MENUSELECT_OPTS_app_voicemail
RUN menuselect/menuselect --enable-category MENUSELECT_CHANNELS --enable-category MENUSELECT_APPS \
    --enable-category MENUSELECT_PBX --enable-category MENUSELECT_FUNCS --enable-category MENUSELECT_CODECS \
    --enable-category MENUSELECT_CDR --enable-category MENUSELECT_CORE_SOUNDS --enable-category MENUSELECT_MOH \
    --enable-category MENUSELECT_UTILS --enable-category MENUSELECT_AGIS --enable-category MENUSELECT_CEL \
    --enable-category MENUSELECT_EXTRA_SOUNDS --enable-category MENUSELECT_RES --enable-category MENUSELECT_TESTS \
    --enable res_pjsip --enable res_pjsip_pubsub --enable res_pjsip_pidf_body_generator --enable res_manager_presencestate --enable res_pjsip_publish_asterisk --enable func_presencestate \
    --enable res_config_odbc --enable res_odbc --enable res_config_mysql menuselect.makeopts

RUN make -j$(nproc)

RUN make install

#RUN make basix-pbx

RUN ldconfig

RUN groupadd asterisk

RUN useradd -r -d /var/lib/asterisk -g asterisk asterisk

RUN make samples

RUN make progdocs

RUN make config

RUN chown -R asterisk:asterisk /etc/asterisk /var/lib/asterisk /var/log/asterisk /var/spool/asterisk /usr/lib/asterisk

WORKDIR /etc/asterisk

COPY ./extensions.conf extensions.conf

RUN chown asterisk:asterisk extensions.conf

COPY ./pjsip.conf pjsip.conf

RUN chown asterisk:asterisk pjsip.conf

COPY ./voicemail.conf voicemail.conf

RUN chown asterisk:asterisk voicemail.conf

RUN touch voicemail.conf pjsip.conf extensions.conf

RUN sed -i '/^;runuser = asterisk/s/^;//' asterisk.conf

RUN sed -i '/^;rungroup = asterisk/s/^;//' asterisk.conf

WORKDIR /etc/asterisk/keys

COPY ./asterisk.cnf asterisk.cnf

COPY ./certificate.sh certificate.sh

COPY ./asterisk.key asterisk.key

COPY ./asterisk.crt asterisk.crt

COPY ./asterisk.bundle asterisk.bundle

RUN if [ "$ANONTION_DOCKER_BUILD" = "uat" ]; then \
      chmod +x certificate.sh ; ./certificate.sh; \
    else \
      echo "Not running certificate.sh"; \
    fi

RUN if [ "$ANONTION_DOCKER_BUILD" = "prod" ]; then \
      chmod 400 asterisk.*; chown asterisk asterisk.* ; \
    else \
      echo "Not changing cert files"; \
    fi

## Expose ports
EXPOSE 5060/tcp
EXPOSE 5061/tcp
EXPOSE 5060/udp
EXPOSE 5061/udp
EXPOSE 10000-20000/udp

WORKDIR /root

RUN echo ""

RUN echo "LS_COLORS=\$LS_COLORS:'di=0;33:' ; export LS_COLOR" >> .bashrc

WORKDIR /etc

COPY ./odbc.ini odbc.ini.BUILD

RUN if [ ! -f "odbc.ini" ] || [ ! -s "odbc.ini" ]; then mv odbc.ini.BUILD odbc.ini; else exit 1; fi

RUN if [ ! -f "odbc.ini" ] || [ ! -s "odbc.ini" ]; then echo "odbc.ini update failed"; exit 1; fi

RUN chown asterisk:asterisk odbc.ini

WORKDIR /etc/asterisk

COPY ./res_odbc.conf res_odbc.conf

RUN chown asterisk:asterisk res_odbc.conf

WORKDIR /etc/asterisk

RUN echo '' >> ./modules.conf
RUN echo 'preload => res_odbc.so' >> ./modules.conf
RUN echo 'preload => res_config_odbc.so' >> ./modules.conf
RUN echo 'noload => res_config_pgsql.so' >> ./modules.conf
RUN echo 'noload => res_config_mysql.so' >> ./modules.conf
RUN echo 'noload => pbx_lua.so' >> ./modules.conf
RUN echo 'noload => pbx_ael.so' >> ./modules.conf
RUN echo '' >> ./modules.conf

RUN echo '' >> ./extconfig.conf
RUN echo 'ps_endpoints => odbc,asterisk' >> ./extconfig.conf
RUN echo 'ps_auths => odbc,asterisk' >> ./extconfig.conf
RUN echo 'ps_aors => odbc,asterisk' >> ./extconfig.conf
#RUN echo 'ps_transports => odbc,asterisk' >> ./extconfig.conf
#RUN echo 'extensions => odbc,asterisk' >> ./extconfig.conf
RUN echo 'ps_contacts => odbc,asterisk' >> ./extconfig.conf
RUN echo '' >> ./extconfig.conf

RUN echo '' >> ./sorcery.conf
RUN echo '[res_pjsip]' >> ./sorcery.conf
RUN echo 'endpoint=realtime,ps_endpoints' >> ./sorcery.conf
RUN echo 'aor=realtime,ps_aors' >> ./sorcery.conf
RUN echo 'auth=realtime,ps_auths' >> ./sorcery.conf
RUN echo 'contact=realtime,ps_contacts' >> ./sorcery.conf
RUN echo '' >> ./sorcery.conf

WORKDIR /usr/local/src/sql

COPY ./password password

RUN sed -i '1s/^/[client]\npassword=/' password

WORKDIR /usr/local/src/lib

COPY ./mysql-connector-odbc_9.3.0-1ubuntu24.04_amd64.deb mysql-connector-odbc_9.3.0-1ubuntu24.04_amd64.deb

RUN apt-get update && \
    apt-get install xemacs21 vim-tiny -y && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
    dpkg -i mysql-connector-odbc_9.3.0-1ubuntu24.04_amd64.deb || true && \
    apt-get install -f -y && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /usr/local/src/sql

COPY ./asterisk.sh asterisk.sh

RUN chmod +x asterisk.sh

COPY ./asterisk.sql asterisk.sql

WORKDIR /var/lib/asterisk/agi-bin

COPY ./check_extension_id.py.agi check_extension_id.py.agi

RUN chmod +x check_extension_id.py.agi

WORKDIR /usr/local/src

# start asterisk and (blocking command) tail when the container starts
CMD (echo "waiting for DB to awaken") && (sleep 60) && ( service asterisk start ) && ( tail -f /dev/null )

