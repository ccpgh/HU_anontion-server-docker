#!/bin/bash 

DOCKER_FILE1=src/main/docker/Dockerfile1
DOCKER_FILE2=src/main/docker/Dockerfile2
BUILD_DIR=build
TAG_ORG=shlibnet
TAG_ID=HU_anontion-server
TAG_ID2=HU_anontion-asterisk
TAG_VERSION=latest
TAG_PREFIX=`echo "$TAG_ORG/$TAG_ID" | tr '[:upper:]' '[:lower:]' ` 
TAG_PREFIX2=`echo "$TAG_ORG/$TAG_ID2" | tr '[:upper:]' '[:lower:]' `
TAG="$TAG_PREFIX:$TAG_VERSION"
TAG2="$TAG_PREFIX2:$TAG_VERSION"
TAG_NAME=anontion
TAG_NAME2=asterisk
ANONTION_DOCKER_GITUSER=ccpgh
SQL_ROOTPWD=
SQL_ANONTIONPWD=


if [[ "$1" == "" ]]
then
  echo "defaulted password for sql root"
  SQL_ROOTPWD=password
else
  echo "set password for sql root"
  SQL_ROOTPWD="${1}"
fi

if [[ "$2" == "" ]]
then
  echo "defaulted password sql user"
  SQL_ANONTIONPWD=password
else
  echo "set password for sql user"
  SQL_ANONTIONPWD="${2}"
fi

echo "(docker ps 2>&1) | grep -v 'CONTAINER ID' | egrep \"${TAG_PREFIX}|${TAG_PREFIX2}\" | cut -d' ' -f1"

#for i in ` (docker ps 2>&1) | grep -v 'CONTAINER ID' | egrep "${TAG_PREFIX}|${TAG_PREFIX2}" | cut -d' ' -f1`
for i in ` (docker ps 2>&1) | grep -v 'CONTAINER ID' | egrep "${TAG_PREFIX}|${TAG_PREFIX2}|asterix" | cut -d' ' -f1`
do
  echo "stopping container $i"
  docker stop "$i" 2>/dev/null
  sleep 5
done

echo "(docker ps --all 2>&1) | grep -v 'CONTAINER ID' | egrep \"${TAG_PREFIX}|${TAG_PREFIX2}\" | cut -d' ' -f1"

#for i in ` (docker ps --all 2>&1) | grep -v 'CONTAINER ID' | egrep "${TAG_PREFIX}|${TAG_PREFIX2}" | cut -d' ' -f1 `
for i in ` (docker ps --all 2>&1) | grep -v 'CONTAINER ID' | egrep "${TAG_PREFIX}|${TAG_PREFIX2}|asterix" | cut -d' ' -f1 `
do
  echo "removing container $i"
  docker rm "$i" 2>/dev/null
done

echo "(docker images -a 2>&1) | grep -v 'REPOSITORY' | egrep \"${TAG_PREFIX}|ubuntu(.*)2[24].04|${TAG_PREFIX2}\" | awk '{ print $3 }'"

#for i in ` (docker images -a 2>&1) | grep -v 'REPOSITORY' | egrep "${TAG_PREFIX}|ubuntu(.*)2[24].04|${TAG_PREFIX2}" | awk '{ print $3 }' `
for i in ` (docker images -a 2>&1) | grep -v 'REPOSITORY' | egrep "${TAG_PREFIX}|ubuntu(.*)2[24].04|${TAG_PREFIX2}|asterix" | awk '{ print $3 }' `
do
  echo "removing image $i"
  docker rmi -f "$i" 2>/dev/null
done

docker images -a

cd ..

pwd

if [[ ! -f "$DOCKER_FILE1" ]]
then
  echo "docker file '$DOCKER_FILE1' missing"
  exit 1
fi

echo DOCKER_FILE1 "$DOCKER_FILE1"

if [[ ! -f "$DOCKER_FILE2" ]]
then
  echo "docker file '$DOCKER_FILE2' missing"
  exit 1
fi

echo DOCKER_FILE2 "$DOCKER_FILE2"

rm -fr "$BUILD_DIR" 2>/dev/null

if [[ -d "$BUILD_DIR"  ]]
then 
  echo "dir '$BUILD_DIR' could not be deleted"
  exit 1
fi

mkdir -p "$BUILD_DIR"

if [[ ! -d "$BUILD_DIR" ]]
then 
  echo "dir '$BUILD_DIR' could not be created"
  exit 1
fi

echo PWD is `pwd`

for i in anontion.key www_anontion_com.ca-bundle www_anontion_com.crt
do
  if [ ! -f "keys/${i}" ]
  then
    echo "mandatory keys file keys/${i} missing"
    exit 1
  else
    cp -ip "keys/${i}" "build/${i}"
  fi
done

echo -n "${SQL_ANONTIONPWD}" > build/password

for i in r install.sql
do
  if [ ! -f "sql/${i}" ]
  then
    echo "mandatory sql file sql/${i} missing"
    exit 1
  else
    cp -ip "sql/${i}" "build/${i}"
  fi
done

for i in extensions.conf sip.conf voicemail.conf pjsip.conf
do
  if [ ! -f "conf/${i}" ]
  then
    echo "mandatory conf file conf/${i} missing"
    exit 1
  else
    cp -ip "conf/${i}" "build/${i}"
  fi
done

cd ./build

if [[ "$?" != "0" ]]
then
  echo "cd to build failed"
  exit 1
fi

for i in r install.sql password
do
  if [ ! -f "${i}" ]
  then
    echo "sql file ${i} is missing"
    exit 1
  fi
done

LHS1=NNNNN
RHS1="${SQL_ROOTPWD}"
sed -i.bak1 "s|${LHS1}|${RHS1}|" r

if [[ "$?" != "0" ]]
then
  echo "sed of r failed"
  exit 1
fi

for i in install.sql
do
LHS2=NNNNN
RHS2="${SQL_ANONTIONPWD}"
sed -i.bak1 "s|${LHS2}|${RHS2}|" ${i}

if [[ "$?" != "0" ]]
then
  echo "sed of ${i} failed"
  exit 1
fi
done

cd ./..

if [[ "$?" != "0" ]]
then
  echo "cd from build failed"
  exit 1
fi

DOCKER_NETWORK_SUBSET=anontion_network

echo "checking network '${DOCKER_NETWORK_SUBSET}' "

FOUND=N

for i in `docker network ls | awk '{ print $1 }' | grep -vi 'network'`
do
  NAME_COUNT="`docker network inspect $i | grep -i ${DOCKER_NETWORK_SUBSET} | grep -l "Name" | wc -l | awk '{ print $1 }'`"

  if [[ "${NAME_COUNT}" -ne "0" ]]
  then
    FOUND=Y
    break
  fi
done

if [[ "${FOUND}" == "N" ]]
then

  echo NOT docker network create -d macvlan -o parent=eth0  \
         --subnet=192.168.1.0/24 \
         --gateway=192.168.0.110 \
         --ip-range=192.168.1.0/27 \
         --aux-address "host=192.168.1.2" \
         ${DOCKER_NETWORK_SUBSET}

  #docker network create -d macvlan -o parent=eth0 \
  #  --subnet=192.168.1.0/24 \
  #  --gateway=192.168.0.110 \
  #  --ip-range=192.168.1.0/27 \
  #  --aux-address "host=192.168.1.2" \
  #  ${DOCKER_NETWORK_SUBSET}

else
  echo "creating network SKIP"
fi

echo running docker build --no-cache --rm -f "$DOCKER_FILE1"  --build-arg "ANONTION_DOCKER_GITUSER=$ANONTION_DOCKER_GITUSER" \
       --build-arg "ANONTION_SERVER_USER=$ANONTION_SERVER_USER" \
       --build-arg "ANONTION_SERVER_PASSWORD=$ANONTION_SERVER_PASSWORD" \
       --build-arg "TAG_ID=$TAG_ID" \
       -t "$TAG" "$BUILD_DIR"

echo docker build --no-cache --rm -f "$DOCKER_FILE1"  --build-arg "ANONTION_DOCKER_GITUSER=$ANONTION_DOCKER_GITUSER" \
       --build-arg "ANONTION_SERVER_USER=$ANONTION_SERVER_USER" \
       --build-arg "ANONTION_SERVER_PASSWORD=$ANONTION_SERVER_PASSWORD" \
       --build-arg "TAG_ID=$TAG_ID" \
       -t "$TAG" "$BUILD_DIR"

echo running docker build --no-cache --rm -f "$DOCKER_FILE2" \
       -t "$TAG2" "$BUILD_DIR"

docker build --no-cache --rm -f "$DOCKER_FILE2" \
       -t "$TAG2" "$BUILD_DIR"

docker images

echo docker run -d --name "$TAG_NAME" -p 443:443 -p 12121:22 "$TAG_PREFIX"

#docker run -d --net ${DOCKER_NETWORK_SUBSET} --name "$TAG_NAME2" -p "5060:5060/udp" -p "5060:5060/tcp" -p "5061:5061/tcp" -p "10000-11000:10000-11000/udp" "$TAG_PREFIX2"
#docker run -d --name "$TAG_NAME2" --network host "$TAG_PREFIX2"
#docker run -d --name "$TAG_NAME2" "$TAG_PREFIX2"
#docker run -d --name "$TAG_NAME2" -p "5060:5060/udp" -p "5060:5060/tcp" -p "5061:5061/tcp" -p "10000-20000:10000-20000/udp" "$TAG_PREFIX2"
docker run -d --name "$TAG_NAME2" -p "5060:5060/udp" -p "5060:5060/tcp" -p "5061:5061/tcp" -p "10000-33000:10000-33000/udp" "$TAG_PREFIX2"

docker ps --all

nc -vz -u localhost 5060

nc -vz -u localhost 5061

echo docker exec -it "$TAG_NAME" bash

echo docker exec -it "$TAG_NAME" bash

echo docker exec -it "$TAG_NAME2" bash

docker exec -it "$TAG_NAME2" bash

rm -fr ./build/*

#sudo tcpdump -i any port 5060 -A
