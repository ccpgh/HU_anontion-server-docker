#!/bin/bash 

# settings
export BUILD_DIR=build
export TAG_ORG=anontion

export TAG_SERVER=server
export TAG_ID_SERVER=HU_${TAG_ORG}-${TAG_SERVER}
export TAG_PREFIX_SERVER=`echo "${TAG_ORG}/${TAG_ID_SERVER}" | tr '[:upper:]' '[:lower:]' `

export TAG_ASTERISK=asterisk
export TAG_ID_ASTERISK=HU_${TAG_ORG}-${TAG_ASTERISK}
export TAG_PREFIX_ASTERISK=`echo "${TAG_ORG}/${TAG_ID_ASTERISK}" | tr '[:upper:]' '[:lower:]' `

export TAG_DB=db
export TAG_ID_DB=HU_${TAG_ORG}-${TAG_DB}
export TAG_PREFIX_DB=`echo "${TAG_ORG}/${TAG_ID_DB}" | tr '[:upper:]' '[:lower:]' `

export ANONTION_DOCKER_GIT_USER=ccpgh

export SQL_ROOT_PWD=
export SQL_ANONTION_PWD=

# password
if [[ "$1" == "" ]]
then
  SQL_ROOT_PWD=password
else
  SQL_ROOT_PWD="${1}"
fi

if [[ "$2" == "" ]]
then
  SQL_ANONTION_PWD=password
else
  SQL_ANONTION_PWD="${2}"
fi

# cleanup
for i in ` (docker ps 2>&1) | grep -v 'CONTAINER ID' | egrep "${TAG_PREFIX_SERVER}|${TAG_PREFIX_ASTERISK}|${TAG_PREFIX_DB}" | cut -d' ' -f1`
do
  \echo "stop container $i"
  docker stop "$i" 2>/dev/null
  \sleep 5
done

for i in ` (docker ps --all 2>&1) | grep -v 'CONTAINER ID' | egrep "${TAG_PREFIX_SERVER}|${TAG_PREFIX_ASTERISK}|${TAG_PREFIX_DB}" | cut -d' ' -f1 `
do
  \echo "remove container $i"
  docker rm "$i" 2>/dev/null
  \sleep 1
done

for i in ` (docker images -a 2>&1) | grep -v 'REPOSITORY' | egrep "${TAG_PREFIX_SERVER}|${TAG_PREFIX_ASTERISK}|${TAG_PREFIX_DB}" | awk '{ print $3 }' `
do
  \echo "remove image $i"
  docker rmi -f "$i" 2>/dev/null
  \sleep 1
done

cd ..

\rm -fr "$BUILD_DIR" 2>/dev/null

if [[ -d "$BUILD_DIR"  ]]
then
  echo "dir '$BUILD_DIR' could not be deleted"
  exit 1
fi

\mkdir -p "$BUILD_DIR"

if [[ ! -d "$BUILD_DIR" ]]
then
  \echo "dir '$BUILD_DIR' could not be created"
  exit 1
fi

for i in "keys/anontion.key" "keys/www_anontion_com.ca-bundle" "keys/www_anontion_com.crt" "sql/anontion.sh" "sql/install.sh" "sql/install.sql"  "conf/extensions.conf" "conf/voicemail.conf" "conf/pjsip.conf" \
  "keys/server.key" "conf/odbc.ini" "conf/res_odbc.conf" "lib/mysql-connector-odbc_9.3.0-1ubuntu24.04_amd64.deb"
do
  if [ ! -f "${i}" ]
  then
    \echo "mandatory keys file '${i}' missing"
    \exit 1
  else
    \cp -ip "${i}" build/`basename "${i}"`
  fi
done

echo -n "${SQL_ANONTION_PWD}" > build/password

cd ./build

if [[ "$?" != "0" ]]
then
  \echo "cd to build failed"
  \exit 1
fi

\pwd

LHS1=NNNNN
RHS1="${SQL_ROOT_PWD}"
sed -i.bak1 "s|${LHS1}|${RHS1}|" install.sh

if [[ "$?" != "0" ]]
then
  echo "sed of install.sh failed"
  exit 1
fi

LHS2=NNNNN
RHS2="${SQL_ANONTION_PWD}"
sed -i.bak1 "s|${LHS2}|${RHS2}|" install.sql

if [[ "$?" != "0" ]]
then
  echo "sed of install.sql failed"
  exit 1
fi

LHS3=NNNNN
RHS3="${SQL_ANONTION_PWD}"
sed -i.bak1 "s|${LHS3}|${RHS3}|" odbc.ini

if [[ "$?" != "0" ]]
then
  echo "sed of odbc.ini failed"
  exit 1
fi

LHS4=NNNNN
RHS4="${SQL_ANONTION_PWD}"
sed -i.bak1 "s|${LHS4}|${RHS4}|" res_odbc.conf

if [[ "$?" != "0" ]]
then
  echo "sed of res_odbc.conf failed"
  exit 1
fi

LHS5=NNNNN
RHS5="${SQL_ROOT_PWD}"
sed -i.bak1 "s|${LHS5}|${RHS5}|" anontion.sh

if [[ "$?" != "0" ]]
then
  echo "sed of anontion.sh failed"
  exit 1
fi

cd ./..

DOCKER_INFRASTRUCTURE=docker-compose-infrastructure.yml
DOCKER_SERVICE=docker-compose-service.yml

for i in "${DOCKER_INFRASTRUCTURE}" "${DOCKER_SERVICE}"
do

  docker compose -f "./docker/${i}" build

  if [[ "$?" != "0" ]]
  then
    echo "command docker-compose -f ./docker/${i} build failed"
    exit 1
  fi

  docker compose -f "./docker/${i}" up -d

  if [[ "$?" != "0" ]]
  then
    echo "command docker-compose -f ./docker/${i} up -d failed"
    exit 1
  fi

done

docker exec -it "${TAG_ASTERISK}" /usr/local/src/sql/anontion.sh

if [[ "$?" != "0" ]]
then
  echo "anontion.sh failed"
  exit 1
fi

docker exec -it "${TAG_ASTERISK}" bash -c "rm -fr /usr/local/src/sql/anontion.sh"

if [[ "$?" != "0" ]]
then
  echo "anontion.sh removal failed"
  exit 1
fi

docker ps --all

rm -fr "./build/*"

docker exec -it "${TAG_ASTERISK}" bash


