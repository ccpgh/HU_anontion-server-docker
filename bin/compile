#!/bin/bash 

# settings
export BUILD_DIR=build
export TAG_ORG=anontion

export TAG_SERVER=server
export TAG_ID_SERVER=HU_${TAG_ORG}-${TAG_SERVER}
export TAG_PREFIX_SERVER=`echo "${TAG_ORG}/${TAG_ID_SERVER}" | tr '[:upper:]' '[:lower:]' `

export TAG_ASTERISK=asterisk
export TAG_ID_ASTERISK=HU_${TAG_ORG}-${TAG_ASTERISK}
export TAG_PREFIX_ASTERISK=`echo "${TAG_ORG}/${TAG_ID_ASTERISK}" | tr '[:upper:]' '[:lower:]' `

export TAG_DB=db
export TAG_ID_DB=HU_${TAG_ORG}-${TAG_DB}
export TAG_PREFIX_DB=`echo "${TAG_ORG}/${TAG_ID_DB}" | tr '[:upper:]' '[:lower:]' `

export ANONTION_DOCKER_GIT_USER=ccpgh

export TAG_COTURN=coturn
export TAG_ID_COTURN=HU_${TAG_ORG}-${TAG_COTURN}
export TAG_PREFIX_COTURN=`echo "${TAG_ORG}/${TAG_ID_COTURN}" | tr '[:upper:]' '[:lower:]' `

export SQL_ROOT_PWD=
export SQL_ANONTION_PWD=

if [[ "${1}" != "dev" && "${1}" != "prod" && "${1}" != "uat" ]]
then
  echo "first parameter must be 'dev' or 'uat' or 'prod' to indicate build type."
  exit 1
fi

# password
if [[ "${2}" == "" ]]
then
  SQL_ROOT_PWD=password
else
  SQL_ROOT_PWD="${2}"
fi

if [[ "${3}" == "" ]]
then
  SQL_ANONTION_PWD=password
else
  SQL_ANONTION_PWD="${3}"
fi

# cleanup
for i in ` (docker ps 2>&1) | grep -v 'CONTAINER ID' | egrep "${TAG_PREFIX_SERVER}|${TAG_PREFIX_ASTERISK}|${TAG_PREFIX_DB}|${TAG_PREFIX_COTURN}" | cut -d' ' -f1`
do
  echo "stop container $i"
  docker stop "$i" 2>/dev/null
  sleep 5
done

for i in ` (docker ps --all 2>&1) | grep -v 'CONTAINER ID' | egrep "${TAG_PREFIX_SERVER}|${TAG_PREFIX_ASTERISK}|${TAG_PREFIX_DB}|${TAG_PREFIX_COTURN}" | cut -d' ' -f1 `
do
  echo "remove container $i"
  docker rm "$i" 2>/dev/null
  sleep 1
done

for i in ` (docker images -a 2>&1) | grep -v 'REPOSITORY' | egrep "${TAG_PREFIX_SERVER}|${TAG_PREFIX_ASTERISK}|${TAG_PREFIX_DB}|${TAG_PREFIX_COTURN}" | awk '{ print $3 }' `
do
  echo "remove image $i"
  docker rmi -f "$i" 2>/dev/null
  sleep 1
done

cd ..

rm -fr "$BUILD_DIR" 2>/dev/null

if [[ -d "$BUILD_DIR"  ]]
then
  echo "dir '$BUILD_DIR' could not be deleted"
  exit 1
fi

mkdir -p "$BUILD_DIR"

if [[ ! -d "$BUILD_DIR" ]]
then
  echo "dir '$BUILD_DIR' could not be created"
  exit 1
fi

cp -ip "artefact/conf/pjsip-${1}.conf" "build/pjsip.conf"
if [[ "$?" != "0" ]]
then
  echo "cp of pjsip-${1}.conf to build dir failed."
  exit 1
fi

if [[ "$1" == "uat" || "$1" == "prod" ]]
then
  cp -ip "artefact/conf/turnserver-${1}.conf" "build/turnserver.conf"
  if [[ "$?" != "0" ]]
  then
    echo "cp of turnserver-${1}.conf to build dir failed."
    exit 1
  fi
fi

for i in "artefact/keys/anontion.key" "artefact/keys/www_anontion_com.ca-bundle" "artefact/keys/www_anontion_com.crt" \
"artefact/sh/asterisk.sh" "artefact/sql/asterisk.sql" "artefact/sh/install.sh" \
"artefact/sql/install.sql" "artefact/conf/extensions.conf" "artefact/conf/voicemail.conf" \
"artefact/keys/server.key" "artefact/conf/odbc.ini" \
"artefact/conf/res_odbc.conf" "artefact/agi/check_extension_id.py.agi" \
"artefact/lib/mysql-connector-odbc_9.3.0-1ubuntu24.04_amd64.deb"
do
  if [ ! -f "${i}" ]
  then
    echo "mandatory keys file '${i}' missing"
    exit 1
  else
    cp -ip "${i}" build/`basename "${i}"`
  fi
done

echo -n "${SQL_ANONTION_PWD}" > build/password

cd ./build

if [[ "$?" != "0" ]]
then
  echo "cd to build failed"
  exit 1
fi

( sed -i.bak1 "s|NNNNN|${SQL_ROOT_PWD}|"     install.sh )    && \
( sed -i.bak1 "s|NNNNN|${SQL_ANONTION_PWD}|" install.sql )   && \
( sed -i.bak1 "s|NNNNN|${SQL_ANONTION_PWD}|" odbc.ini )      && \
( sed -i.bak1 "s|NNNNN|${SQL_ANONTION_PWD}|" res_odbc.conf ) && \
( sed -i.bak1 "s|NNNNN|${SQL_ANONTION_PWD}|" pjsip.conf )

if [[ "$?" != "0" ]]
then
  echo "bulk sed of password failed"
  exit 1
fi

if [[ "$1" == "prod" || "$1" == "uat" ]]
then
  sed -i.bak1 "s|NNNNN|${SQL_ANONTION_PWD}|" turnserver.conf

  if [[ "$?" != "0" ]]
  then
    echo "sed of turnserver.conf failed"
    exit 1
  fi
fi

cd ./..

( docker compose -p anontion-infrastructure -f "./docker/docker-compose-infrastructure.yml" build ) && \
( docker compose -p anontion-infrastructure -f "./docker/docker-compose-infrastructure.yml" up -d )

if [[ "$?" != "0" ]]
then
  echo "command docker-compose -p anontion-infrastructure -f ./docker/docker-compose-infrastructure.yml build and up failed"
  exit 1
fi

if [[ "$1" == "prod" || "$1" == "uat" ]]
then
  ( docker compose -p anontion-coturn -f "./docker/docker-compose-coturn.yml" build ) && \
  ( docker compose -p anontion-coturn -f "./docker/docker-compose-coturn.yml" up -d )

  if [[ "$?" != "0" ]]
  then
    echo "command docker compose -p anontion-coturn -f ./docker/docker-compose-coturn.yml build and up failed"
    exit 1
  fi
fi

( docker compose -p anontion-service -f "./docker/docker-compose-service.yml" build ) && \
( docker compose -p anontion-service -f "./docker/docker-compose-service.yml" up -d )

if [[ "$?" != "0" ]]
then
  echo "command docker compose -p anontion-service -f ./docker/docker-compose-service.yml build and up failed"
  exit 1
fi

( docker exec -it "${TAG_ASTERISK}" /usr/local/src/sql/asterisk.sh ) && \
( docker exec -it "${TAG_ASTERISK}" bash -c "rm -fr /usr/local/src/sql/password" )

if [[ "$?" != "0" ]]
then
  echo "anontion run and file removal failed"
  exit 1
fi

docker ps --all

rm -fr "./build/*"

docker exec -it "${TAG_ASTERISK}" bash


